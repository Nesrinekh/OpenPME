package openpme.expressions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptDivExpr = createDescriptorForDivExpr();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptLiteral = createDescriptorForLiteral();
  /*package*/ final ConceptDescriptor myConceptMinusExpr = createDescriptorForMinusExpr();
  /*package*/ final ConceptDescriptor myConceptMulExpr = createDescriptorForMulExpr();
  /*package*/ final ConceptDescriptor myConceptPlusExpr = createDescriptorForPlusExpr();
  /*package*/ final ConceptDescriptor myConceptRealLiteral = createDescriptorForRealLiteral();
  private final LanguageConceptSwitch myConceptIndex;

  public StructureAspectDescriptor() {
    myConceptIndex = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptDivExpr, myConceptExpression, myConceptLiteral, myConceptMinusExpr, myConceptMulExpr, myConceptPlusExpr, myConceptRealLiteral);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myConceptIndex.index(id)) {
      case LanguageConceptSwitch.DivExpr:
        return myConceptDivExpr;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.Literal:
        return myConceptLiteral;
      case LanguageConceptSwitch.MinusExpr:
        return myConceptMinusExpr;
      case LanguageConceptSwitch.MulExpr:
        return myConceptMulExpr;
      case LanguageConceptSwitch.PlusExpr:
        return myConceptPlusExpr;
      case LanguageConceptSwitch.RealLiteral:
        return myConceptRealLiteral;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myConceptIndex.index(c);
  }

  private static ConceptDescriptor createDescriptorForDivExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.expressions", "DivExpr", 0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x4b8b96c3273f0ffeL);
    b.class_(false, false, false);
    b.origin("r:2879ac26-cf1f-47cd-aa5d-07b180db413b(openpme.expressions.structure)/5443610339528609790");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.expressions", "Expression", 0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x5d47753368733a88L);
    b.class_(false, true, false);
    b.origin("r:2879ac26-cf1f-47cd-aa5d-07b180db413b(openpme.expressions.structure)/6721469832529918600");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.expressions", "Literal", 0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x5d47753368735b7eL);
    b.class_(false, false, false);
    b.super_("openpme.expressions.structure.Expression", 0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x5d47753368733a88L);
    b.origin("r:2879ac26-cf1f-47cd-aa5d-07b180db413b(openpme.expressions.structure)/6721469832529927038");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.expressions", "MinusExpr", 0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x4b8b96c3273f0fffL);
    b.class_(false, false, false);
    b.origin("r:2879ac26-cf1f-47cd-aa5d-07b180db413b(openpme.expressions.structure)/5443610339528609791");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMulExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.expressions", "MulExpr", 0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x4b8b96c3273f1000L);
    b.class_(false, false, false);
    b.origin("r:2879ac26-cf1f-47cd-aa5d-07b180db413b(openpme.expressions.structure)/5443610339528609792");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusExpr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.expressions", "PlusExpr", 0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x4b8b96c3273f1001L);
    b.class_(false, false, false);
    b.origin("r:2879ac26-cf1f-47cd-aa5d-07b180db413b(openpme.expressions.structure)/5443610339528609793");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRealLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.expressions", "RealLiteral", 0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x5d47753368735b7fL);
    b.class_(false, true, false);
    b.super_("openpme.expressions.structure.Literal", 0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x5d47753368735b7eL);
    b.origin("r:2879ac26-cf1f-47cd-aa5d-07b180db413b(openpme.expressions.structure)/6721469832529927039");
    return b.create();
  }
}
