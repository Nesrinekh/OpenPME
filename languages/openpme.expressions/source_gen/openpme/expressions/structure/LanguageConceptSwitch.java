package openpme.expressions.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Addition = 0;
  public static final int AndExpression = 1;
  public static final int Division = 2;
  public static final int Equal = 3;
  public static final int Greater = 4;
  public static final int GreaterEqual = 5;
  public static final int Less = 6;
  public static final int LessEqual = 7;
  public static final int Modulo = 8;
  public static final int Multiplication = 9;
  public static final int NotEqual = 10;
  public static final int NotExpression = 11;
  public static final int OrExpression = 12;
  public static final int Subtraction = 13;
  public static final int UnaryMinus = 14;
  public static final int UnaryPlus = 15;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x9a51a2b483e44324L, 0x8cf84ee101121a3aL);
    builder.put(0x6732efa1a0b597ffL, Addition);
    builder.put(0x6732efa1a0b5983dL, AndExpression);
    builder.put(0x6732efa1a0b59802L, Division);
    builder.put(0x6732efa1a0b59804L, Equal);
    builder.put(0x6732efa1a0b59807L, Greater);
    builder.put(0x6732efa1a0b59809L, GreaterEqual);
    builder.put(0x6732efa1a0b59806L, Less);
    builder.put(0x6732efa1a0b59808L, LessEqual);
    builder.put(0x6732efa1a0b59803L, Modulo);
    builder.put(0x6732efa1a0b59801L, Multiplication);
    builder.put(0x6732efa1a0b59805L, NotEqual);
    builder.put(0x6732efa1a0b5983cL, NotExpression);
    builder.put(0x6732efa1a0b5983eL, OrExpression);
    builder.put(0x6732efa1a0b59800L, Subtraction);
    builder.put(0x6732efa1a0b597f8L, UnaryMinus);
    builder.put(0x6732efa1a0b597f7L, UnaryPlus);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
