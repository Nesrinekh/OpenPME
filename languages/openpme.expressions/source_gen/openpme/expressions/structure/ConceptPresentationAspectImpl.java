package openpme.expressions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_DivExpr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Expression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Literal = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MinusExpr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MulExpr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusExpr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RealLiteral = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.DivExpr:
        return props_DivExpr;
      case LanguageConceptSwitch.Expression:
        return props_Expression;
      case LanguageConceptSwitch.Literal:
        return props_Literal;
      case LanguageConceptSwitch.MinusExpr:
        return props_MinusExpr;
      case LanguageConceptSwitch.MulExpr:
        return props_MulExpr;
      case LanguageConceptSwitch.PlusExpr:
        return props_PlusExpr;
      case LanguageConceptSwitch.RealLiteral:
        return props_RealLiteral;
    }
    return null;
  }
}
