package openpme.statements.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptElseIfStatement = createDescriptorForElseIfStatement();
  /*package*/ final ConceptDescriptor myConceptIfStatement = createDescriptorForIfStatement();
  /*package*/ final ConceptDescriptor myConceptStatement = createDescriptorForStatement();
  /*package*/ final ConceptDescriptor myConceptTimeLoopStatement = createDescriptorForTimeLoopStatement();
  /*package*/ final ConceptDescriptor myConcepttest = createDescriptorFortest();
  private final LanguageConceptSwitch myConceptIndex;

  public StructureAspectDescriptor() {
    myConceptIndex = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptElseIfStatement, myConceptIfStatement, myConceptStatement, myConceptTimeLoopStatement, myConcepttest);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myConceptIndex.index(id)) {
      case LanguageConceptSwitch.ElseIfStatement:
        return myConceptElseIfStatement;
      case LanguageConceptSwitch.IfStatement:
        return myConceptIfStatement;
      case LanguageConceptSwitch.Statement:
        return myConceptStatement;
      case LanguageConceptSwitch.TimeLoopStatement:
        return myConceptTimeLoopStatement;
      case LanguageConceptSwitch.test:
        return myConcepttest;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myConceptIndex.index(c);
  }

  private static ConceptDescriptor createDescriptorForElseIfStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.statements", "ElseIfStatement", 0xd89a1f942b1040d1L, 0xa01e560f94e501d7L, 0x4b8b96c3273f0ffcL);
    b.class_(false, false, false);
    b.origin("r:ebc5ff6c-54ad-44cc-986b-956c5e8ea76e(openpme.statements.structure)/5443610339528609788");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.statements", "IfStatement", 0xd89a1f942b1040d1L, 0xa01e560f94e501d7L, 0x4b8b96c3273f0ffbL);
    b.class_(false, false, false);
    b.origin("r:ebc5ff6c-54ad-44cc-986b-956c5e8ea76e(openpme.statements.structure)/5443610339528609787");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.statements", "Statement", 0xd89a1f942b1040d1L, 0xa01e560f94e501d7L, 0x5d47753368735f49L);
    b.class_(false, false, true);
    b.origin("r:ebc5ff6c-54ad-44cc-986b-956c5e8ea76e(openpme.statements.structure)/6721469832529928009");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTimeLoopStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.statements", "TimeLoopStatement", 0xd89a1f942b1040d1L, 0xa01e560f94e501d7L, 0x4b8b96c3273f0ffdL);
    b.class_(false, false, false);
    b.origin("r:ebc5ff6c-54ad-44cc-986b-956c5e8ea76e(openpme.statements.structure)/5443610339528609789");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorFortest() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.statements", "test", 0xd89a1f942b1040d1L, 0xa01e560f94e501d7L, 0x4c0d2ef140569cbcL);
    b.class_(false, false, true);
    b.origin("r:ebc5ff6c-54ad-44cc-986b-956c5e8ea76e(openpme.statements.structure)/5480087935281175740");
    return b.create();
  }
}
