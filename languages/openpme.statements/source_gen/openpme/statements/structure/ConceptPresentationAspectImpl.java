package openpme.statements.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ElseIfStatement;
  private ConceptPresentation props_GeneralStatement;
  private ConceptPresentation props_IfStatement;
  private ConceptPresentation props_RealLiteral;
  private ConceptPresentation props_TimeLoopStatement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ElseIfStatement:
        if (props_ElseIfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ElseIfStatement");
          props_ElseIfStatement = cpb.create();
        }
        return props_ElseIfStatement;
      case LanguageConceptSwitch.GeneralStatement:
        if (props_GeneralStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_GeneralStatement = cpb.create();
        }
        return props_GeneralStatement;
      case LanguageConceptSwitch.IfStatement:
        if (props_IfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IfStatement");
          props_IfStatement = cpb.create();
        }
        return props_IfStatement;
      case LanguageConceptSwitch.RealLiteral:
        if (props_RealLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RealLiteral");
          props_RealLiteral = cpb.create();
        }
        return props_RealLiteral;
      case LanguageConceptSwitch.TimeLoopStatement:
        if (props_TimeLoopStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TimeLoopStatement");
          props_TimeLoopStatement = cpb.create();
        }
        return props_TimeLoopStatement;
    }
    return null;
  }
}
