package openpme.cpp.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AddressOfExpression;
  private ConceptPresentation props_ArrayDeclaration;
  private ConceptPresentation props_ArrayLiteral;
  private ConceptPresentation props_ArrayParameterDeclaration;
  private ConceptPresentation props_ArrayTemplate;
  private ConceptPresentation props_AssignmentExpression;
  private ConceptPresentation props_AutoType;
  private ConceptPresentation props_BaseAssignmentExpression;
  private ConceptPresentation props_BaseMethodCall;
  private ConceptPresentation props_BaseParameterDeclaration;
  private ConceptPresentation props_BaseVariableDeclaration;
  private ConceptPresentation props_BinaryOperation;
  private ConceptPresentation props_BoundaryPPME;
  private ConceptPresentation props_CharType;
  private ConceptPresentation props_ClassInstanceDecl;
  private ConceptPresentation props_ClassInstanceReference;
  private ConceptPresentation props_ConstexprDeclaration;
  private ConceptPresentation props_Continue;
  private ConceptPresentation props_DecimalLiteral;
  private ConceptPresentation props_DivExpression;
  private ConceptPresentation props_DotCall;
  private ConceptPresentation props_DoubleLiteral;
  private ConceptPresentation props_DoubleType;
  private ConceptPresentation props_EqualsExpression;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_ExpressionPPME;
  private ConceptPresentation props_ExpressionStatement;
  private ConceptPresentation props_File;
  private ConceptPresentation props_FloatLiteral;
  private ConceptPresentation props_FloatType;
  private ConceptPresentation props_GreaterThanExpression;
  private ConceptPresentation props_ITemplate;
  private ConceptPresentation props_IfStatement;
  private ConceptPresentation props_Include;
  private ConceptPresentation props_IndexedExpression;
  private ConceptPresentation props_IntegerLiteral;
  private ConceptPresentation props_IntegerType;
  private ConceptPresentation props_MethodCall;
  private ConceptPresentation props_MethodDeclaration;
  private ConceptPresentation props_MinusExpression;
  private ConceptPresentation props_MulExpression;
  private ConceptPresentation props_NewParagraph;
  private ConceptPresentation props_OperationAssignmentExpression;
  private ConceptPresentation props_Package;
  private ConceptPresentation props_ParameterDeclaration;
  private ConceptPresentation props_ParenthesizedExpression;
  private ConceptPresentation props_PlusAssignmentExpression;
  private ConceptPresentation props_PlusExpression;
  private ConceptPresentation props_PointerType;
  private ConceptPresentation props_PostIncrement;
  private ConceptPresentation props_PowerExpression;
  private ConceptPresentation props_PreProcessorExpression;
  private ConceptPresentation props_Reference;
  private ConceptPresentation props_SizeType;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_StatementList;
  private ConceptPresentation props_StringLiteral;
  private ConceptPresentation props_Template;
  private ConceptPresentation props_TemplateTypename;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_UnaryExpression;
  private ConceptPresentation props_UncheckedReference;
  private ConceptPresentation props_UnkownClassType;
  private ConceptPresentation props_UnkownMethodCall;
  private ConceptPresentation props_VariableDeclaration;
  private ConceptPresentation props_VariableReference;
  private ConceptPresentation props_VoidType;
  private ConceptPresentation props_WhileLoop;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AddressOfExpression:
        if (props_AddressOfExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AddressOfExpression");
          props_AddressOfExpression = cpb.create();
        }
        return props_AddressOfExpression;
      case LanguageConceptSwitch.ArrayDeclaration:
        if (props_ArrayDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ArrayDeclaration");
          props_ArrayDeclaration = cpb.create();
        }
        return props_ArrayDeclaration;
      case LanguageConceptSwitch.ArrayLiteral:
        if (props_ArrayLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ArrayLiteral");
          props_ArrayLiteral = cpb.create();
        }
        return props_ArrayLiteral;
      case LanguageConceptSwitch.ArrayParameterDeclaration:
        if (props_ArrayParameterDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ArrayParameterDeclaration");
          props_ArrayParameterDeclaration = cpb.create();
        }
        return props_ArrayParameterDeclaration;
      case LanguageConceptSwitch.ArrayTemplate:
        if (props_ArrayTemplate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ArrayTemplate");
          props_ArrayTemplate = cpb.create();
        }
        return props_ArrayTemplate;
      case LanguageConceptSwitch.AssignmentExpression:
        if (props_AssignmentExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(" = ");
          props_AssignmentExpression = cpb.create();
        }
        return props_AssignmentExpression;
      case LanguageConceptSwitch.AutoType:
        if (props_AutoType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AutoType");
          props_AutoType = cpb.create();
        }
        return props_AutoType;
      case LanguageConceptSwitch.BaseAssignmentExpression:
        if (props_BaseAssignmentExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseAssignmentExpression = cpb.create();
        }
        return props_BaseAssignmentExpression;
      case LanguageConceptSwitch.BaseMethodCall:
        if (props_BaseMethodCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BaseMethodCall");
          props_BaseMethodCall = cpb.create();
        }
        return props_BaseMethodCall;
      case LanguageConceptSwitch.BaseParameterDeclaration:
        if (props_BaseParameterDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseParameterDeclaration = cpb.create();
        }
        return props_BaseParameterDeclaration;
      case LanguageConceptSwitch.BaseVariableDeclaration:
        if (props_BaseVariableDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BaseVariableDeclaration");
          props_BaseVariableDeclaration = cpb.create();
        }
        return props_BaseVariableDeclaration;
      case LanguageConceptSwitch.BinaryOperation:
        if (props_BinaryOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BinaryOperation");
          props_BinaryOperation = cpb.create();
        }
        return props_BinaryOperation;
      case LanguageConceptSwitch.BoundaryPPME:
        if (props_BoundaryPPME == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BoundaryPPME");
          props_BoundaryPPME = cpb.create();
        }
        return props_BoundaryPPME;
      case LanguageConceptSwitch.CharType:
        if (props_CharType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CharType");
          props_CharType = cpb.create();
        }
        return props_CharType;
      case LanguageConceptSwitch.ClassInstanceDecl:
        if (props_ClassInstanceDecl == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ClassInstanceDecl");
          props_ClassInstanceDecl = cpb.create();
        }
        return props_ClassInstanceDecl;
      case LanguageConceptSwitch.ClassInstanceReference:
        if (props_ClassInstanceReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("class_reference");
          props_ClassInstanceReference = cpb.create();
        }
        return props_ClassInstanceReference;
      case LanguageConceptSwitch.ConstexprDeclaration:
        if (props_ConstexprDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConstexprDeclaration");
          props_ConstexprDeclaration = cpb.create();
        }
        return props_ConstexprDeclaration;
      case LanguageConceptSwitch.Continue:
        if (props_Continue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Continue");
          props_Continue = cpb.create();
        }
        return props_Continue;
      case LanguageConceptSwitch.DecimalLiteral:
        if (props_DecimalLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DecimalLiteral");
          props_DecimalLiteral = cpb.create();
        }
        return props_DecimalLiteral;
      case LanguageConceptSwitch.DivExpression:
        if (props_DivExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DivExpression");
          props_DivExpression = cpb.create();
        }
        return props_DivExpression;
      case LanguageConceptSwitch.DotCall:
        if (props_DotCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DotCall");
          props_DotCall = cpb.create();
        }
        return props_DotCall;
      case LanguageConceptSwitch.DoubleLiteral:
        if (props_DoubleLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DoubleLiteral");
          props_DoubleLiteral = cpb.create();
        }
        return props_DoubleLiteral;
      case LanguageConceptSwitch.DoubleType:
        if (props_DoubleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DoubleType");
          props_DoubleType = cpb.create();
        }
        return props_DoubleType;
      case LanguageConceptSwitch.EqualsExpression:
        if (props_EqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EqualsExpression");
          props_EqualsExpression = cpb.create();
        }
        return props_EqualsExpression;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.ExpressionPPME:
        if (props_ExpressionPPME == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExpressionPPME");
          props_ExpressionPPME = cpb.create();
        }
        return props_ExpressionPPME;
      case LanguageConceptSwitch.ExpressionStatement:
        if (props_ExpressionStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExpressionStatement");
          props_ExpressionStatement = cpb.create();
        }
        return props_ExpressionStatement;
      case LanguageConceptSwitch.File:
        if (props_File == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_File = cpb.create();
        }
        return props_File;
      case LanguageConceptSwitch.FloatLiteral:
        if (props_FloatLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FloatLiteral");
          props_FloatLiteral = cpb.create();
        }
        return props_FloatLiteral;
      case LanguageConceptSwitch.FloatType:
        if (props_FloatType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FloatType");
          props_FloatType = cpb.create();
        }
        return props_FloatType;
      case LanguageConceptSwitch.GreaterThanExpression:
        if (props_GreaterThanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GreaterThanExpression");
          props_GreaterThanExpression = cpb.create();
        }
        return props_GreaterThanExpression;
      case LanguageConceptSwitch.ITemplate:
        if (props_ITemplate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ITemplate = cpb.create();
        }
        return props_ITemplate;
      case LanguageConceptSwitch.IfStatement:
        if (props_IfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IfStatement");
          props_IfStatement = cpb.create();
        }
        return props_IfStatement;
      case LanguageConceptSwitch.Include:
        if (props_Include == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Include");
          props_Include = cpb.create();
        }
        return props_Include;
      case LanguageConceptSwitch.IndexedExpression:
        if (props_IndexedExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IndexedExpression");
          props_IndexedExpression = cpb.create();
        }
        return props_IndexedExpression;
      case LanguageConceptSwitch.IntegerLiteral:
        if (props_IntegerLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IntegerLiteral");
          props_IntegerLiteral = cpb.create();
        }
        return props_IntegerLiteral;
      case LanguageConceptSwitch.IntegerType:
        if (props_IntegerType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IntegerType");
          props_IntegerType = cpb.create();
        }
        return props_IntegerType;
      case LanguageConceptSwitch.MethodCall:
        if (props_MethodCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x61dc5e0dbf47caf0L, 0x61dc5e0dbf47caf6L, "methodDeclaration", "", "");
          props_MethodCall = cpb.create();
        }
        return props_MethodCall;
      case LanguageConceptSwitch.MethodDeclaration:
        if (props_MethodDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MethodDeclaration");
          props_MethodDeclaration = cpb.create();
        }
        return props_MethodDeclaration;
      case LanguageConceptSwitch.MinusExpression:
        if (props_MinusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MinusExpression");
          props_MinusExpression = cpb.create();
        }
        return props_MinusExpression;
      case LanguageConceptSwitch.MulExpression:
        if (props_MulExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MulExpression");
          props_MulExpression = cpb.create();
        }
        return props_MulExpression;
      case LanguageConceptSwitch.NewParagraph:
        if (props_NewParagraph == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NewParagraph");
          props_NewParagraph = cpb.create();
        }
        return props_NewParagraph;
      case LanguageConceptSwitch.OperationAssignmentExpression:
        if (props_OperationAssignmentExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OperationAssignmentExpression");
          props_OperationAssignmentExpression = cpb.create();
        }
        return props_OperationAssignmentExpression;
      case LanguageConceptSwitch.Package:
        if (props_Package == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Package");
          props_Package = cpb.create();
        }
        return props_Package;
      case LanguageConceptSwitch.ParameterDeclaration:
        if (props_ParameterDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ParameterDeclaration");
          props_ParameterDeclaration = cpb.create();
        }
        return props_ParameterDeclaration;
      case LanguageConceptSwitch.ParenthesizedExpression:
        if (props_ParenthesizedExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ParenthesizedExpression");
          props_ParenthesizedExpression = cpb.create();
        }
        return props_ParenthesizedExpression;
      case LanguageConceptSwitch.PlusAssignmentExpression:
        if (props_PlusAssignmentExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(" += ");
          props_PlusAssignmentExpression = cpb.create();
        }
        return props_PlusAssignmentExpression;
      case LanguageConceptSwitch.PlusExpression:
        if (props_PlusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PlusExpression");
          props_PlusExpression = cpb.create();
        }
        return props_PlusExpression;
      case LanguageConceptSwitch.PointerType:
        if (props_PointerType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PointerType");
          props_PointerType = cpb.create();
        }
        return props_PointerType;
      case LanguageConceptSwitch.PostIncrement:
        if (props_PostIncrement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PostIncrement");
          props_PostIncrement = cpb.create();
        }
        return props_PostIncrement;
      case LanguageConceptSwitch.PowerExpression:
        if (props_PowerExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("left^right");
          cpb.rawPresentation("PowerExpression");
          props_PowerExpression = cpb.create();
        }
        return props_PowerExpression;
      case LanguageConceptSwitch.PreProcessorExpression:
        if (props_PreProcessorExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PreProcessorExpression");
          props_PreProcessorExpression = cpb.create();
        }
        return props_PreProcessorExpression;
      case LanguageConceptSwitch.Reference:
        if (props_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Reference = cpb.create();
        }
        return props_Reference;
      case LanguageConceptSwitch.SizeType:
        if (props_SizeType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SizeType");
          props_SizeType = cpb.create();
        }
        return props_SizeType;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.StatementList:
        if (props_StatementList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StatementList");
          props_StatementList = cpb.create();
        }
        return props_StatementList;
      case LanguageConceptSwitch.StringLiteral:
        if (props_StringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StringLiteral");
          props_StringLiteral = cpb.create();
        }
        return props_StringLiteral;
      case LanguageConceptSwitch.Template:
        if (props_Template == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Template");
          props_Template = cpb.create();
        }
        return props_Template;
      case LanguageConceptSwitch.TemplateTypename:
        if (props_TemplateTypename == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TemplateTypename");
          props_TemplateTypename = cpb.create();
        }
        return props_TemplateTypename;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Type");
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.UnaryExpression:
        if (props_UnaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("UnaryExpression");
          props_UnaryExpression = cpb.create();
        }
        return props_UnaryExpression;
      case LanguageConceptSwitch.UncheckedReference:
        if (props_UncheckedReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("UncheckedReference");
          props_UncheckedReference = cpb.create();
        }
        return props_UncheckedReference;
      case LanguageConceptSwitch.UnkownClassType:
        if (props_UnkownClassType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("UnkownClassType");
          props_UnkownClassType = cpb.create();
        }
        return props_UnkownClassType;
      case LanguageConceptSwitch.UnkownMethodCall:
        if (props_UnkownMethodCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("UnkownMethodCall");
          props_UnkownMethodCall = cpb.create();
        }
        return props_UnkownMethodCall;
      case LanguageConceptSwitch.VariableDeclaration:
        if (props_VariableDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VariableDeclaration");
          props_VariableDeclaration = cpb.create();
        }
        return props_VariableDeclaration;
      case LanguageConceptSwitch.VariableReference:
        if (props_VariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("var_reference");
          props_VariableReference = cpb.create();
        }
        return props_VariableReference;
      case LanguageConceptSwitch.VoidType:
        if (props_VoidType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VoidType");
          props_VoidType = cpb.create();
        }
        return props_VoidType;
      case LanguageConceptSwitch.WhileLoop:
        if (props_WhileLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WhileLoop");
          props_WhileLoop = cpb.create();
        }
        return props_WhileLoop;
    }
    return null;
  }
}
