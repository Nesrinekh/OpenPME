package openpme.cpp.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAddressOfExpression = createDescriptorForAddressOfExpression();
  /*package*/ final ConceptDescriptor myConceptArrayDeclaration = createDescriptorForArrayDeclaration();
  /*package*/ final ConceptDescriptor myConceptArrayLiteral = createDescriptorForArrayLiteral();
  /*package*/ final ConceptDescriptor myConceptArrayParameterDeclaration = createDescriptorForArrayParameterDeclaration();
  /*package*/ final ConceptDescriptor myConceptArrayTemplate = createDescriptorForArrayTemplate();
  /*package*/ final ConceptDescriptor myConceptAssignmentExpression = createDescriptorForAssignmentExpression();
  /*package*/ final ConceptDescriptor myConceptAutoType = createDescriptorForAutoType();
  /*package*/ final ConceptDescriptor myConceptBaseAssignmentExpression = createDescriptorForBaseAssignmentExpression();
  /*package*/ final ConceptDescriptor myConceptBaseMethodCall = createDescriptorForBaseMethodCall();
  /*package*/ final ConceptDescriptor myConceptBaseParameterDeclaration = createDescriptorForBaseParameterDeclaration();
  /*package*/ final ConceptDescriptor myConceptBaseVariableDeclaration = createDescriptorForBaseVariableDeclaration();
  /*package*/ final ConceptDescriptor myConceptBinaryOperation = createDescriptorForBinaryOperation();
  /*package*/ final ConceptDescriptor myConceptBoundaryPPME = createDescriptorForBoundaryPPME();
  /*package*/ final ConceptDescriptor myConceptCharType = createDescriptorForCharType();
  /*package*/ final ConceptDescriptor myConceptClassInstanceDecl = createDescriptorForClassInstanceDecl();
  /*package*/ final ConceptDescriptor myConceptClassInstanceReference = createDescriptorForClassInstanceReference();
  /*package*/ final ConceptDescriptor myConceptConstexprDeclaration = createDescriptorForConstexprDeclaration();
  /*package*/ final ConceptDescriptor myConceptContinue = createDescriptorForContinue();
  /*package*/ final ConceptDescriptor myConceptDecimalLiteral = createDescriptorForDecimalLiteral();
  /*package*/ final ConceptDescriptor myConceptDivExpression = createDescriptorForDivExpression();
  /*package*/ final ConceptDescriptor myConceptDotCall = createDescriptorForDotCall();
  /*package*/ final ConceptDescriptor myConceptDoubleLiteral = createDescriptorForDoubleLiteral();
  /*package*/ final ConceptDescriptor myConceptDoubleType = createDescriptorForDoubleType();
  /*package*/ final ConceptDescriptor myConceptEqualsExpression = createDescriptorForEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptExpressionPPME = createDescriptorForExpressionPPME();
  /*package*/ final ConceptDescriptor myConceptExpressionStatement = createDescriptorForExpressionStatement();
  /*package*/ final ConceptDescriptor myConceptFile = createDescriptorForFile();
  /*package*/ final ConceptDescriptor myConceptFloatLiteral = createDescriptorForFloatLiteral();
  /*package*/ final ConceptDescriptor myConceptFloatType = createDescriptorForFloatType();
  /*package*/ final ConceptDescriptor myConceptGreaterThanExpression = createDescriptorForGreaterThanExpression();
  /*package*/ final ConceptDescriptor myConceptITemplate = createDescriptorForITemplate();
  /*package*/ final ConceptDescriptor myConceptIfStatement = createDescriptorForIfStatement();
  /*package*/ final ConceptDescriptor myConceptInclude = createDescriptorForInclude();
  /*package*/ final ConceptDescriptor myConceptIndexedExpression = createDescriptorForIndexedExpression();
  /*package*/ final ConceptDescriptor myConceptIntegerLiteral = createDescriptorForIntegerLiteral();
  /*package*/ final ConceptDescriptor myConceptIntegerType = createDescriptorForIntegerType();
  /*package*/ final ConceptDescriptor myConceptMethodCall = createDescriptorForMethodCall();
  /*package*/ final ConceptDescriptor myConceptMethodDeclaration = createDescriptorForMethodDeclaration();
  /*package*/ final ConceptDescriptor myConceptMinusExpression = createDescriptorForMinusExpression();
  /*package*/ final ConceptDescriptor myConceptMulExpression = createDescriptorForMulExpression();
  /*package*/ final ConceptDescriptor myConceptNewParagraph = createDescriptorForNewParagraph();
  /*package*/ final ConceptDescriptor myConceptOperationAssignmentExpression = createDescriptorForOperationAssignmentExpression();
  /*package*/ final ConceptDescriptor myConceptPackage = createDescriptorForPackage();
  /*package*/ final ConceptDescriptor myConceptParameterDeclaration = createDescriptorForParameterDeclaration();
  /*package*/ final ConceptDescriptor myConceptParenthesizedExpression = createDescriptorForParenthesizedExpression();
  /*package*/ final ConceptDescriptor myConceptPlusAssignmentExpression = createDescriptorForPlusAssignmentExpression();
  /*package*/ final ConceptDescriptor myConceptPlusExpression = createDescriptorForPlusExpression();
  /*package*/ final ConceptDescriptor myConceptPointerType = createDescriptorForPointerType();
  /*package*/ final ConceptDescriptor myConceptPostIncrement = createDescriptorForPostIncrement();
  /*package*/ final ConceptDescriptor myConceptPowerExpression = createDescriptorForPowerExpression();
  /*package*/ final ConceptDescriptor myConceptPreProcessorExpression = createDescriptorForPreProcessorExpression();
  /*package*/ final ConceptDescriptor myConceptReference = createDescriptorForReference();
  /*package*/ final ConceptDescriptor myConceptSizeType = createDescriptorForSizeType();
  /*package*/ final ConceptDescriptor myConceptStatement = createDescriptorForStatement();
  /*package*/ final ConceptDescriptor myConceptStatementList = createDescriptorForStatementList();
  /*package*/ final ConceptDescriptor myConceptStringLiteral = createDescriptorForStringLiteral();
  /*package*/ final ConceptDescriptor myConceptTemplate = createDescriptorForTemplate();
  /*package*/ final ConceptDescriptor myConceptTemplateTypename = createDescriptorForTemplateTypename();
  /*package*/ final ConceptDescriptor myConceptType = createDescriptorForType();
  /*package*/ final ConceptDescriptor myConceptUnaryExpression = createDescriptorForUnaryExpression();
  /*package*/ final ConceptDescriptor myConceptUncheckedReference = createDescriptorForUncheckedReference();
  /*package*/ final ConceptDescriptor myConceptUnkownClassType = createDescriptorForUnkownClassType();
  /*package*/ final ConceptDescriptor myConceptUnkownMethodCall = createDescriptorForUnkownMethodCall();
  /*package*/ final ConceptDescriptor myConceptVariableDeclaration = createDescriptorForVariableDeclaration();
  /*package*/ final ConceptDescriptor myConceptVariableReference = createDescriptorForVariableReference();
  /*package*/ final ConceptDescriptor myConceptVoidType = createDescriptorForVoidType();
  /*package*/ final ConceptDescriptor myConceptWhileLoop = createDescriptorForWhileLoop();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0x66673400467e48d2L, 0xace06f708d2ef66dL, "openpme.core");
    deps.aggregatedLanguage(0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, "openpme.expressions");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAddressOfExpression, myConceptArrayDeclaration, myConceptArrayLiteral, myConceptArrayParameterDeclaration, myConceptArrayTemplate, myConceptAssignmentExpression, myConceptAutoType, myConceptBaseAssignmentExpression, myConceptBaseMethodCall, myConceptBaseParameterDeclaration, myConceptBaseVariableDeclaration, myConceptBinaryOperation, myConceptBoundaryPPME, myConceptCharType, myConceptClassInstanceDecl, myConceptClassInstanceReference, myConceptConstexprDeclaration, myConceptContinue, myConceptDecimalLiteral, myConceptDivExpression, myConceptDotCall, myConceptDoubleLiteral, myConceptDoubleType, myConceptEqualsExpression, myConceptExpression, myConceptExpressionPPME, myConceptExpressionStatement, myConceptFile, myConceptFloatLiteral, myConceptFloatType, myConceptGreaterThanExpression, myConceptITemplate, myConceptIfStatement, myConceptInclude, myConceptIndexedExpression, myConceptIntegerLiteral, myConceptIntegerType, myConceptMethodCall, myConceptMethodDeclaration, myConceptMinusExpression, myConceptMulExpression, myConceptNewParagraph, myConceptOperationAssignmentExpression, myConceptPackage, myConceptParameterDeclaration, myConceptParenthesizedExpression, myConceptPlusAssignmentExpression, myConceptPlusExpression, myConceptPointerType, myConceptPostIncrement, myConceptPowerExpression, myConceptPreProcessorExpression, myConceptReference, myConceptSizeType, myConceptStatement, myConceptStatementList, myConceptStringLiteral, myConceptTemplate, myConceptTemplateTypename, myConceptType, myConceptUnaryExpression, myConceptUncheckedReference, myConceptUnkownClassType, myConceptUnkownMethodCall, myConceptVariableDeclaration, myConceptVariableReference, myConceptVoidType, myConceptWhileLoop);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AddressOfExpression:
        return myConceptAddressOfExpression;
      case LanguageConceptSwitch.ArrayDeclaration:
        return myConceptArrayDeclaration;
      case LanguageConceptSwitch.ArrayLiteral:
        return myConceptArrayLiteral;
      case LanguageConceptSwitch.ArrayParameterDeclaration:
        return myConceptArrayParameterDeclaration;
      case LanguageConceptSwitch.ArrayTemplate:
        return myConceptArrayTemplate;
      case LanguageConceptSwitch.AssignmentExpression:
        return myConceptAssignmentExpression;
      case LanguageConceptSwitch.AutoType:
        return myConceptAutoType;
      case LanguageConceptSwitch.BaseAssignmentExpression:
        return myConceptBaseAssignmentExpression;
      case LanguageConceptSwitch.BaseMethodCall:
        return myConceptBaseMethodCall;
      case LanguageConceptSwitch.BaseParameterDeclaration:
        return myConceptBaseParameterDeclaration;
      case LanguageConceptSwitch.BaseVariableDeclaration:
        return myConceptBaseVariableDeclaration;
      case LanguageConceptSwitch.BinaryOperation:
        return myConceptBinaryOperation;
      case LanguageConceptSwitch.BoundaryPPME:
        return myConceptBoundaryPPME;
      case LanguageConceptSwitch.CharType:
        return myConceptCharType;
      case LanguageConceptSwitch.ClassInstanceDecl:
        return myConceptClassInstanceDecl;
      case LanguageConceptSwitch.ClassInstanceReference:
        return myConceptClassInstanceReference;
      case LanguageConceptSwitch.ConstexprDeclaration:
        return myConceptConstexprDeclaration;
      case LanguageConceptSwitch.Continue:
        return myConceptContinue;
      case LanguageConceptSwitch.DecimalLiteral:
        return myConceptDecimalLiteral;
      case LanguageConceptSwitch.DivExpression:
        return myConceptDivExpression;
      case LanguageConceptSwitch.DotCall:
        return myConceptDotCall;
      case LanguageConceptSwitch.DoubleLiteral:
        return myConceptDoubleLiteral;
      case LanguageConceptSwitch.DoubleType:
        return myConceptDoubleType;
      case LanguageConceptSwitch.EqualsExpression:
        return myConceptEqualsExpression;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.ExpressionPPME:
        return myConceptExpressionPPME;
      case LanguageConceptSwitch.ExpressionStatement:
        return myConceptExpressionStatement;
      case LanguageConceptSwitch.File:
        return myConceptFile;
      case LanguageConceptSwitch.FloatLiteral:
        return myConceptFloatLiteral;
      case LanguageConceptSwitch.FloatType:
        return myConceptFloatType;
      case LanguageConceptSwitch.GreaterThanExpression:
        return myConceptGreaterThanExpression;
      case LanguageConceptSwitch.ITemplate:
        return myConceptITemplate;
      case LanguageConceptSwitch.IfStatement:
        return myConceptIfStatement;
      case LanguageConceptSwitch.Include:
        return myConceptInclude;
      case LanguageConceptSwitch.IndexedExpression:
        return myConceptIndexedExpression;
      case LanguageConceptSwitch.IntegerLiteral:
        return myConceptIntegerLiteral;
      case LanguageConceptSwitch.IntegerType:
        return myConceptIntegerType;
      case LanguageConceptSwitch.MethodCall:
        return myConceptMethodCall;
      case LanguageConceptSwitch.MethodDeclaration:
        return myConceptMethodDeclaration;
      case LanguageConceptSwitch.MinusExpression:
        return myConceptMinusExpression;
      case LanguageConceptSwitch.MulExpression:
        return myConceptMulExpression;
      case LanguageConceptSwitch.NewParagraph:
        return myConceptNewParagraph;
      case LanguageConceptSwitch.OperationAssignmentExpression:
        return myConceptOperationAssignmentExpression;
      case LanguageConceptSwitch.Package:
        return myConceptPackage;
      case LanguageConceptSwitch.ParameterDeclaration:
        return myConceptParameterDeclaration;
      case LanguageConceptSwitch.ParenthesizedExpression:
        return myConceptParenthesizedExpression;
      case LanguageConceptSwitch.PlusAssignmentExpression:
        return myConceptPlusAssignmentExpression;
      case LanguageConceptSwitch.PlusExpression:
        return myConceptPlusExpression;
      case LanguageConceptSwitch.PointerType:
        return myConceptPointerType;
      case LanguageConceptSwitch.PostIncrement:
        return myConceptPostIncrement;
      case LanguageConceptSwitch.PowerExpression:
        return myConceptPowerExpression;
      case LanguageConceptSwitch.PreProcessorExpression:
        return myConceptPreProcessorExpression;
      case LanguageConceptSwitch.Reference:
        return myConceptReference;
      case LanguageConceptSwitch.SizeType:
        return myConceptSizeType;
      case LanguageConceptSwitch.Statement:
        return myConceptStatement;
      case LanguageConceptSwitch.StatementList:
        return myConceptStatementList;
      case LanguageConceptSwitch.StringLiteral:
        return myConceptStringLiteral;
      case LanguageConceptSwitch.Template:
        return myConceptTemplate;
      case LanguageConceptSwitch.TemplateTypename:
        return myConceptTemplateTypename;
      case LanguageConceptSwitch.Type:
        return myConceptType;
      case LanguageConceptSwitch.UnaryExpression:
        return myConceptUnaryExpression;
      case LanguageConceptSwitch.UncheckedReference:
        return myConceptUncheckedReference;
      case LanguageConceptSwitch.UnkownClassType:
        return myConceptUnkownClassType;
      case LanguageConceptSwitch.UnkownMethodCall:
        return myConceptUnkownMethodCall;
      case LanguageConceptSwitch.VariableDeclaration:
        return myConceptVariableDeclaration;
      case LanguageConceptSwitch.VariableReference:
        return myConceptVariableReference;
      case LanguageConceptSwitch.VoidType:
        return myConceptVoidType;
      case LanguageConceptSwitch.WhileLoop:
        return myConceptWhileLoop;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAddressOfExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "AddressOfExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7c104ec9e23bf8c0L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.UnaryExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ed0db740L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/8939731889321408704");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ArrayDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x191c9741ff17257aL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BaseVariableDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b83935605L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1809487460004472186");
    b.version(2);
    b.aggregate("size", 0xfb9adce4edaef47L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc698d202L).optional(true).ordered(true).multiple(false).origin("1133127882858229575").done();
    b.aggregate("initialization", 0xfb9adce4edbfd8aL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(true).ordered(true).multiple(false).origin("1133127882858298762").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ArrayLiteral", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x191c9741ff176e20L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1809487460004490784");
    b.version(2);
    b.aggregate("value", 0x191c9741ff176e21L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(true).ordered(true).multiple(true).origin("1809487460004490785").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayParameterDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ArrayParameterDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x4f2266e99642d623L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BaseParameterDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x4f2266e99642d624L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/5702233231638844963");
    b.version(2);
    b.aggregate("size", 0x4f2266e99642d628L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc698d202L).optional(true).ordered(true).multiple(false).origin("5702233231638844968").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayTemplate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ArrayTemplate", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7f6dcea16e0938fcL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/9182222408009464060");
    b.version(2);
    b.aggregate("type", 0x7f6dcea16e0938fdL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL).optional(false).ordered(true).multiple(false).origin("9182222408009464061").done();
    b.aggregate("size", 0x7f6dcea16e0938ffL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc698d202L).optional(false).ordered(true).multiple(false).origin("9182222408009464063").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssignmentExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "AssignmentExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ed041db8L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BaseAssignmentExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ecffe42dL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/6819848912527171000");
    b.version(2);
    b.alias(" = ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAutoType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "AutoType", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7f6dcea16e172985L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/9182222408010377605");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBaseAssignmentExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "BaseAssignmentExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ecffe42dL);
    b.class_(false, true, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/6819848912526894125");
    b.version(2);
    b.aggregate("lValue", 0x5ea4f873ed03f183L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("6819848912527159683").done();
    b.aggregate("rValue", 0x5ea4f873ed03f185L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("6819848912527159685").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBaseMethodCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "BaseMethodCall", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5e9bcbfa01948fd9L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/6817266735584153561");
    b.version(2);
    b.aggregate("actualArgument", 0x5e9bcbfa01948fdaL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(true).ordered(true).multiple(true).origin("6817266735584153562").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBaseParameterDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "BaseParameterDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x4f2266e99642d624L);
    b.class_(false, true, false);
    b.super_("openpme.cpp.structure.BaseVariableDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b83935605L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/5702233231638844964");
    b.version(2);
    b.property("isReferenceParameter", 0x51af5ed79d451d7eL).type(PrimitiveTypeId.BOOLEAN).origin("5886027518146059646").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBaseVariableDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "BaseVariableDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b83935605L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/5811061938759882245");
    b.version(2);
    b.aggregate("type", 0x50a50a0b8393cb63L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL).optional(false).ordered(true).multiple(false).origin("5811061938759912291").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "BinaryOperation", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc6987013L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128830483");
    b.version(2);
    b.aggregate("left", 0x2822197bc6987046L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("2891901930128830534").done();
    b.aggregate("right", 0x2822197bc6987048L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("2891901930128830536").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBoundaryPPME() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "BoundaryPPME", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x1b7ba4fcf5802fb0L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1980357867516997552");
    b.version(2);
    b.aggregate("boundary", 0x1e91818305e88465L).target(0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x68c06653ceca6792L).optional(false).ordered(true).multiple(false).origin("2202684092500706405").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCharType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "CharType", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x74ece5238d612d18L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/8425360943761927448");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForClassInstanceDecl() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ClassInstanceDecl", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x40af25902399cd06L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/4660985440354553094");
    b.version(2);
    b.aggregate("classType", 0xe85cbd8157c46feL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL).optional(false).ordered(true).multiple(false).origin("1046466617367348990").done();
    b.aggregate("initArgs", 0x40af25902399cd09L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(true).ordered(true).multiple(true).origin("4660985440354553097").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForClassInstanceReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ClassInstanceReference", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x191c9741ff1549fdL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Reference", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7f6dcea16e229213L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1809487460004350461");
    b.version(2);
    b.associate("classDeclaration", 0x191c9741ff1549feL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x40af25902399cd06L).optional(false).origin("1809487460004350462").done();
    b.alias("class_reference");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstexprDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ConstexprDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7f6dcea16e18f52aL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.VariableDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c66eL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/9182222408010495274");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContinue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "Continue", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6f80b9753f6d22bdL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/8034625648455393981");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDecimalLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "DecimalLiteral", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6b2d90539761d079L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7722987624706723961");
    b.version(2);
    b.property("value", 0x6b2d90539761d07bL).type(MetaIdFactory.dataTypeId(0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x55480d35723f9461L)).origin("7722987624706723963").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "DivExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6b2d905397590c25L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BinaryOperation", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc6987013L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7722987624706149413");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDotCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "DotCall", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x191c9741ff154a00L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1809487460004350464");
    b.version(2);
    b.aggregate("callee", 0x191c9741ff154a01L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7f6dcea16e229213L).optional(false).ordered(true).multiple(false).origin("1809487460004350465").done();
    b.aggregate("method", 0x191c9741ff154a03L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x191c9741ff154a0aL).optional(false).ordered(true).multiple(false).origin("1809487460004350467").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDoubleLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "DoubleLiteral", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0xdfac0c4398407d2L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1007329415681804242");
    b.version(2);
    b.property("value", 0xdfac0c4398407d9L).type(MetaIdFactory.dataTypeId(0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x55480d35723f9461L)).origin("1007329415681804249").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDoubleType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "DoubleType", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x22a0749b91d4531aL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2495122405078618906");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "EqualsExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69871f1L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BinaryOperation", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc6987013L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128830961");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.class_(false, true, false);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128727954");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionPPME() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ExpressionPPME", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x22a0749b91d62431L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2495122405078737969");
    b.version(2);
    b.aggregate("expression", 0x22a0749b91d62432L).target(0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x230c14e48d9ff542L).optional(false).ordered(true).multiple(false).origin("2495122405078737970").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ExpressionStatement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x61dc5e0dbf48e792L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7051614529692166034");
    b.version(2);
    b.aggregate("expression", 0x61dc5e0dbf48e793L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("7051614529692166035").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFile() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "File", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c681L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128721537");
    b.version(2);
    b.aggregate("statement", 0x2822197bc696c9ffL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L).optional(true).ordered(true).multiple(true).origin("2891901930128722431").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFloatLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "FloatLiteral", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x1b7ba4fcf57910efL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1980357867516530927");
    b.version(2);
    b.property("value", 0x1b7ba4fcf57910f0L).type(MetaIdFactory.dataTypeId(0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x55480d35723f9461L)).origin("1980357867516530928").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFloatType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "FloatType", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x1b7ba4fcf5789283L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1980357867516498563");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "GreaterThanExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6b2d90539753239cL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BinaryOperation", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc6987013L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7722987624705762204");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITemplate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ITemplate", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x73b331baacd9d3e7L);
    b.interface_();
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/8337062013026554855");
    b.version(2);
    b.aggregate("template", 0x73b331baacd9d3e8L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0xb31c55ca68a1e0bL).optional(true).ordered(true).multiple(false).origin("8337062013026554856").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "IfStatement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6f80b9753f66e6f7L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/8034625648454985463");
    b.version(2);
    b.aggregate("condition", 0x6f80b9753f66e70dL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("8034625648454985485").done();
    b.aggregate("ifTrue", 0x6f80b9753f66e711L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b839405a6L).optional(false).ordered(true).multiple(false).origin("8034625648454985489").done();
    b.aggregate("ifFalse", 0x6f80b9753f66e714L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b839405a6L).optional(true).ordered(true).multiple(false).origin("8034625648454985492").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInclude() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "Include", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6b2d905397641453L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7722987624706872403");
    b.version(2);
    b.property("library", 0x6b2d905397641454L).type(PrimitiveTypeId.STRING).origin("7722987624706872404").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIndexedExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "IndexedExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ecffe79bL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/6819848912526895003");
    b.version(2);
    b.aggregate("expression", 0x5ea4f873ecffe7a0L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("6819848912526895008").done();
    b.aggregate("index", 0x5ea4f873ecffe79eL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc698d202L).optional(false).ordered(true).multiple(false).origin("6819848912526895006").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "IntegerLiteral", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc698d202L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128855554");
    b.version(2);
    b.property("value", 0x2822197bc698d206L).type(PrimitiveTypeId.INTEGER).origin("2891901930128855558").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "IntegerType", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a8a54L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128968276");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMethodCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "MethodCall", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x61dc5e0dbf47caf0L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BaseMethodCall", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5e9bcbfa01948fd9L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7051614529692093168");
    b.version(2);
    b.associate("methodDeclaration", 0x61dc5e0dbf47caf6L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b839405a9L).optional(false).origin("7051614529692093174").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMethodDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "MethodDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b839405a9L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.parent(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x73b331baacd9d3e7L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/5811061938759927209");
    b.version(2);
    b.aggregate("methodName", 0x73b331baacdd1f44L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("8337062013026770756").done();
    b.aggregate("returnType", 0x50a50a0b839405aaL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL).optional(false).ordered(true).multiple(false).origin("5811061938759927210").done();
    b.aggregate("parameter", 0x50a50a0b839405acL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x4f2266e99642d624L).optional(true).ordered(true).multiple(true).origin("5811061938759927212").done();
    b.aggregate("body", 0x50a50a0b839405afL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b839405a6L).optional(false).ordered(true).multiple(false).origin("5811061938759927215").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "MinusExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6f80b9753f712696L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BinaryOperation", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc6987013L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/8034625648455657110");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMulExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "MulExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ed0a5e31L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BinaryOperation", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc6987013L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/6819848912527580721");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNewParagraph() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "NewParagraph", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7f6dcea16e1c6ef7L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/9182222408010723063");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperationAssignmentExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "OperationAssignmentExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6b2d9053976f3d96L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BaseAssignmentExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ecffe42dL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7722987624707603862");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPackage() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "Package", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0xe85cbd81578d3f7L);
    b.class_(false, false, false);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1046466617367122935");
    b.version(2);
    b.property("name", 0xe85cbd81578d3f8L).type(PrimitiveTypeId.STRING).origin("1046466617367122936").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameterDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ParameterDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b8393490dL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BaseParameterDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x4f2266e99642d624L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/5811061938759878925");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParenthesizedExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "ParenthesizedExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6b2d9053975e8df1L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.UnaryExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ed0db740L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7722987624706510321");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusAssignmentExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "PlusAssignmentExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6b2d9053976f3d97L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.OperationAssignmentExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6b2d9053976f3d96L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7722987624707603863");
    b.version(2);
    b.alias(" += ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "PlusExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc6988baeL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BinaryOperation", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc6987013L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128837550");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPointerType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "PointerType", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7c104ec9e24073d3L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/8939731889321702355");
    b.version(2);
    b.aggregate("type", 0x7c104ec9e24073d4L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL).optional(false).ordered(true).multiple(false).origin("8939731889321702356").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPostIncrement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "PostIncrement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ed0db73fL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.UnaryExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ed0db740L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/6819848912527800127");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPowerExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "PowerExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x6b2d90539763d297L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BinaryOperation", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc6987013L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/7722987624706855575");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPreProcessorExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "PreProcessorExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ed13f18bL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/6819848912528208267");
    b.version(2);
    b.property("expression", 0x5ea4f873ed13f18cL).type(PrimitiveTypeId.STRING).origin("6819848912528208268").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "Reference", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7f6dcea16e229213L);
    b.class_(false, true, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/9182222408011125267");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSizeType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "SizeType", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x191c9741ff1724f9L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1809487460004472057");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.class_(false, true, false);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128721353");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatementList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "StatementList", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b839405a6L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/5811061938759927206");
    b.version(2);
    b.aggregate("statement", 0x50a50a0b839405a7L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L).optional(false).ordered(true).multiple(true).origin("5811061938759927207").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "StringLiteral", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc697f7c4L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128799684");
    b.version(2);
    b.property("value", 0x2822197bc697f7c5L).type(PrimitiveTypeId.STRING).origin("2891901930128799685").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTemplate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "Template", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0xb31c55ca68a1e0bL);
    b.class_(false, false, false);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/806642809997762059");
    b.version(2);
    b.property("exprDependsOnParameter", 0x7c104ec9e253145fL).type(PrimitiveTypeId.BOOLEAN).origin("8939731889322923103").done();
    b.aggregate("templateParameter", 0xb31c55ca68a1e0cL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(true).ordered(true).multiple(true).origin("806642809997762060").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTemplateTypename() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "TemplateTypename", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x73b331baace4fb9eL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/8337062013027285918");
    b.version(2);
    b.aggregate("type", 0x73b331baace4fb9fL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("8337062013027285919").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128964735");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "UnaryExpression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5ea4f873ed0db740L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/6819848912527800128");
    b.version(2);
    b.aggregate("expression", 0x5ea4f873ed0db747L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("6819848912527800135").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUncheckedReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "UncheckedReference", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x40af2590239b30c7L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Expression", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/4660985440354644167");
    b.version(2);
    b.property("refName", 0x40af2590239b30c8L).type(PrimitiveTypeId.STRING).origin("4660985440354644168").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnkownClassType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "UnkownClassType", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0xe85cbd8157c435dL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.parent(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x73b331baacd9d3e7L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1046466617367348061");
    b.version(2);
    b.aggregate("package", 0xe85cbd8157c4363L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0xe85cbd81578d3f7L).optional(true).ordered(true).multiple(false).origin("1046466617367348067").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnkownMethodCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "UnkownMethodCall", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x191c9741ff154a0aL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BaseMethodCall", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x5e9bcbfa01948fd9L);
    b.parent(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x73b331baacd9d3e7L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/1809487460004350474");
    b.version(2);
    b.aggregate("methodName", 0x191c9741ff154a0bL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("1809487460004350475").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "VariableDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c66eL);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.BaseVariableDeclaration", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b83935605L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128721518");
    b.version(2);
    b.aggregate("initialization", 0x2822197bc696df8fL).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(true).ordered(true).multiple(false).origin("2891901930128727951").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "VariableReference", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc697d305L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Reference", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7f6dcea16e229213L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/2891901930128790277");
    b.version(2);
    b.associate("referenceDeclaration", 0x2822197bc697d306L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b83935605L).optional(false).origin("2891901930128790278").done();
    b.alias("var_reference");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVoidType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "VoidType", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x73b331baace2d776L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Type", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc69a7c7fL);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/8337062013027145590");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhileLoop() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.cpp", "WhileLoop", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x7f6dcea16e1ae2b5L);
    b.class_(false, false, false);
    b.super_("openpme.cpp.structure.Statement", 0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696c5c9L);
    b.origin("r:de65f5a7-a2ac-4927-934e-b920f01f5866(openpme.cpp.structure)/9182222408010621621");
    b.version(2);
    b.aggregate("condition", 0x7f6dcea16e1ae2b6L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x2822197bc696df92L).optional(false).ordered(true).multiple(false).origin("9182222408010621622").done();
    b.aggregate("body", 0x7f6dcea16e1ae2b8L).target(0x6ebd153bbe954d8bL, 0xa7f3f07bf7fb7d8fL, 0x50a50a0b839405a6L).optional(false).ordered(true).multiple(false).origin("9182222408010621624").done();
    return b.create();
  }
}
