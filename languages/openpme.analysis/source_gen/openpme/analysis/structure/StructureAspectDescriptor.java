package openpme.analysis.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptHerbieAnnotation = createDescriptorForHerbieAnnotation();
  /*package*/ final ConceptDescriptor myConceptRangeAnnotation = createDescriptorForRangeAnnotation();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, "openpme.expressions");
    deps.aggregatedLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptHerbieAnnotation, myConceptRangeAnnotation);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.HerbieAnnotation:
        return myConceptHerbieAnnotation;
      case LanguageConceptSwitch.RangeAnnotation:
        return myConceptRangeAnnotation;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForHerbieAnnotation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.analysis", "HerbieAnnotation", 0xd5e2442b039e493bL, 0xb466e933a1705c19L, 0x5d477533687339ebL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.core.structure.NodeAttribute", 0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L);
    b.origin("r:4c57e75d-fecf-4ba1-9c7d-6fa99b103c50(openpme.analysis.structure)/6721469832529918443");
    b.version(2);
    b.aggregate("inputError", 0x5d47753368735b30L).target(0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x72d99ef7d66a97faL).optional(true).ordered(true).multiple(false).origin("6721469832529926960").done();
    b.aggregate("outputError", 0x5d47753368735f0bL).target(0x9a51a2b483e44324L, 0x8cf84ee101121a3aL, 0x72d99ef7d66a97faL).optional(true).ordered(true).multiple(false).origin("6721469832529927947").done();
    b.aggregate("replacement", 0x5d47753368735f10L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L).optional(true).ordered(true).multiple(false).origin("6721469832529927952").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRangeAnnotation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.analysis", "RangeAnnotation", 0xd5e2442b039e493bL, 0xb466e933a1705c19L, 0x6732efa1a0b59639L);
    b.class_(false, false, false);
    b.origin("r:4c57e75d-fecf-4ba1-9c7d-6fa99b103c50(openpme.analysis.structure)/7436269412207138361");
    b.version(2);
    return b.create();
  }
}
