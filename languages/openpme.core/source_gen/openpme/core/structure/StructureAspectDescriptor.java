package openpme.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptArrowExpression = createDescriptorForArrowExpression();
  /*package*/ final ConceptDescriptor myConceptCellList = createDescriptorForCellList();
  /*package*/ final ConceptDescriptor myConceptDifferentialOperator = createDescriptorForDifferentialOperator();
  /*package*/ final ConceptDescriptor myConceptInterpolate = createDescriptorForInterpolate();
  /*package*/ final ConceptDescriptor myConceptJacobianOperator = createDescriptorForJacobianOperator();
  /*package*/ final ConceptDescriptor myConceptLaplacianOperator = createDescriptorForLaplacianOperator();
  /*package*/ final ConceptDescriptor myConceptOnGrid = createDescriptorForOnGrid();
  /*package*/ final ConceptDescriptor myConceptOnParticle = createDescriptorForOnParticle();
  /*package*/ final ConceptDescriptor myConceptPowerExpression = createDescriptorForPowerExpression();
  /*package*/ final ConceptDescriptor myConceptRandomNumberExpression = createDescriptorForRandomNumberExpression();
  /*package*/ final ConceptDescriptor myConceptSqrtExpression = createDescriptorForSqrtExpression();
  /*package*/ final ConceptDescriptor myConceptStartLoop = createDescriptorForStartLoop();
  /*package*/ final ConceptDescriptor myConceptStopLoop = createDescriptorForStopLoop();
  /*package*/ final ConceptDescriptor myConceptVerletList = createDescriptorForVerletList();
  /*package*/ final ConceptDescriptor myConceptdtLoop = createDescriptorFordtLoop();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptArrowExpression, myConceptCellList, myConceptDifferentialOperator, myConceptInterpolate, myConceptJacobianOperator, myConceptLaplacianOperator, myConceptOnGrid, myConceptOnParticle, myConceptPowerExpression, myConceptRandomNumberExpression, myConceptSqrtExpression, myConceptStartLoop, myConceptStopLoop, myConceptVerletList, myConceptdtLoop);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ArrowExpression:
        return myConceptArrowExpression;
      case LanguageConceptSwitch.CellList:
        return myConceptCellList;
      case LanguageConceptSwitch.DifferentialOperator:
        return myConceptDifferentialOperator;
      case LanguageConceptSwitch.Interpolate:
        return myConceptInterpolate;
      case LanguageConceptSwitch.JacobianOperator:
        return myConceptJacobianOperator;
      case LanguageConceptSwitch.LaplacianOperator:
        return myConceptLaplacianOperator;
      case LanguageConceptSwitch.OnGrid:
        return myConceptOnGrid;
      case LanguageConceptSwitch.OnParticle:
        return myConceptOnParticle;
      case LanguageConceptSwitch.PowerExpression:
        return myConceptPowerExpression;
      case LanguageConceptSwitch.RandomNumberExpression:
        return myConceptRandomNumberExpression;
      case LanguageConceptSwitch.SqrtExpression:
        return myConceptSqrtExpression;
      case LanguageConceptSwitch.StartLoop:
        return myConceptStartLoop;
      case LanguageConceptSwitch.StopLoop:
        return myConceptStopLoop;
      case LanguageConceptSwitch.VerletList:
        return myConceptVerletList;
      case LanguageConceptSwitch.dtLoop:
        return myConceptdtLoop;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForArrowExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "ArrowExpression", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b5963dL);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138365");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCellList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "CellList", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b596f2L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138546");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDifferentialOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "DifferentialOperator", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b5963eL);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138366");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInterpolate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "Interpolate", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b5964aL);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138378");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForJacobianOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "JacobianOperator", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b5963fL);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138367");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLaplacianOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "LaplacianOperator", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b59640L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138368");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOnGrid() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "OnGrid", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b596f0L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138544");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOnParticle() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "OnParticle", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b596f1L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138545");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPowerExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "PowerExpression", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b59641L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138369");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRandomNumberExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "RandomNumberExpression", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b59642L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138370");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSqrtExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "SqrtExpression", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b59643L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138371");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStartLoop() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "StartLoop", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b596f5L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138549");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStopLoop() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "StopLoop", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b596f6L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138550");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVerletList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "VerletList", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b596f3L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138547");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorFordtLoop() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("openpme.core", "dtLoop", 0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x6732efa1a0b596f4L);
    b.class_(false, false, false);
    b.origin("r:15616bdb-5f06-41a2-ba85-ee0c68a0d3dd(openpme.core.structure)/7436269412207138548");
    b.version(2);
    return b.create();
  }
}
