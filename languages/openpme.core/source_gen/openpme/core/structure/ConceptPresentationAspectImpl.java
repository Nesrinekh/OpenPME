package openpme.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ArrowExpression;
  private ConceptPresentation props_CellList;
  private ConceptPresentation props_DifferentialOperator;
  private ConceptPresentation props_Interpolate;
  private ConceptPresentation props_JacobianOperator;
  private ConceptPresentation props_LaplacianOperator;
  private ConceptPresentation props_OnGrid;
  private ConceptPresentation props_OnParticle;
  private ConceptPresentation props_PowerExpression;
  private ConceptPresentation props_RandomNumberExpression;
  private ConceptPresentation props_SqrtExpression;
  private ConceptPresentation props_StartLoop;
  private ConceptPresentation props_StopLoop;
  private ConceptPresentation props_VerletList;
  private ConceptPresentation props_dtLoop;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ArrowExpression:
        if (props_ArrowExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ArrowExpression");
          props_ArrowExpression = cpb.create();
        }
        return props_ArrowExpression;
      case LanguageConceptSwitch.CellList:
        if (props_CellList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CellList");
          props_CellList = cpb.create();
        }
        return props_CellList;
      case LanguageConceptSwitch.DifferentialOperator:
        if (props_DifferentialOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DifferentialOperator");
          props_DifferentialOperator = cpb.create();
        }
        return props_DifferentialOperator;
      case LanguageConceptSwitch.Interpolate:
        if (props_Interpolate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Interpolate");
          props_Interpolate = cpb.create();
        }
        return props_Interpolate;
      case LanguageConceptSwitch.JacobianOperator:
        if (props_JacobianOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JacobianOperator");
          props_JacobianOperator = cpb.create();
        }
        return props_JacobianOperator;
      case LanguageConceptSwitch.LaplacianOperator:
        if (props_LaplacianOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LaplacianOperator");
          props_LaplacianOperator = cpb.create();
        }
        return props_LaplacianOperator;
      case LanguageConceptSwitch.OnGrid:
        if (props_OnGrid == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OnGrid");
          props_OnGrid = cpb.create();
        }
        return props_OnGrid;
      case LanguageConceptSwitch.OnParticle:
        if (props_OnParticle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OnParticle");
          props_OnParticle = cpb.create();
        }
        return props_OnParticle;
      case LanguageConceptSwitch.PowerExpression:
        if (props_PowerExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PowerExpression");
          props_PowerExpression = cpb.create();
        }
        return props_PowerExpression;
      case LanguageConceptSwitch.RandomNumberExpression:
        if (props_RandomNumberExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RandomNumberExpression");
          props_RandomNumberExpression = cpb.create();
        }
        return props_RandomNumberExpression;
      case LanguageConceptSwitch.SqrtExpression:
        if (props_SqrtExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SqrtExpression");
          props_SqrtExpression = cpb.create();
        }
        return props_SqrtExpression;
      case LanguageConceptSwitch.StartLoop:
        if (props_StartLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StartLoop");
          props_StartLoop = cpb.create();
        }
        return props_StartLoop;
      case LanguageConceptSwitch.StopLoop:
        if (props_StopLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StopLoop");
          props_StopLoop = cpb.create();
        }
        return props_StopLoop;
      case LanguageConceptSwitch.VerletList:
        if (props_VerletList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VerletList");
          props_VerletList = cpb.create();
        }
        return props_VerletList;
      case LanguageConceptSwitch.dtLoop:
        if (props_dtLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dtLoop");
          props_dtLoop = cpb.create();
        }
        return props_dtLoop;
    }
    return null;
  }
}
