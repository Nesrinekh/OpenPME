package openpme.core.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ArrowExpression = 0;
  public static final int BoundaryConditions = 1;
  public static final int Box = 2;
  public static final int CellList = 3;
  public static final int Continuous = 4;
  public static final int CutoffRadius = 5;
  public static final int Delta = 6;
  public static final int DifferentialOperator = 7;
  public static final int Dimension = 8;
  public static final int Discrete = 9;
  public static final int Discretize = 10;
  public static final int Domain = 11;
  public static final int Epsilon = 12;
  public static final int Force = 13;
  public static final int Foreach = 14;
  public static final int Ghost = 15;
  public static final int Grid = 16;
  public static final int Hybrid = 17;
  public static final int ICommand = 18;
  public static final int ICommandC = 19;
  public static final int ICommandD = 20;
  public static final int ILoop = 21;
  public static final int InitParticles = 22;
  public static final int InitialConditions = 23;
  public static final int Interpolate = 24;
  public static final int JacobianOperator = 25;
  public static final int KineticEnergy = 26;
  public static final int Lambda = 27;
  public static final int LaplacianOperator = 28;
  public static final int ListOfCommForeach = 29;
  public static final int ListOfCommLoopD = 30;
  public static final int ListOfHybridComm = 31;
  public static final int ListOfPhysicalNotations = 32;
  public static final int ListOfPhysicalQuantities = 33;
  public static final int NonPeriodic = 34;
  public static final int NonUniform = 35;
  public static final int Nu = 36;
  public static final int NumParticles = 37;
  public static final int Omega = 38;
  public static final int OnGrid = 39;
  public static final int OnParticle = 40;
  public static final int Particle = 41;
  public static final int Periodic = 42;
  public static final int Phi = 43;
  public static final int PhysicalQuantity = 44;
  public static final int PotentialEnergy = 45;
  public static final int PowerExpression = 46;
  public static final int Property = 47;
  public static final int Psi = 48;
  public static final int RandomNumberExpression = 49;
  public static final int Remesh = 50;
  public static final int Rho = 51;
  public static final int Sigma = 52;
  public static final int SqrtExpression = 53;
  public static final int StartLoop = 54;
  public static final int StopLoop = 55;
  public static final int Tau = 56;
  public static final int TimeLoop = 57;
  public static final int TimeLoopC = 58;
  public static final int TimeLoopD = 59;
  public static final int TypeOfBoundary = 60;
  public static final int TypeOfInitialCond = 61;
  public static final int TypeOfSimulation = 62;
  public static final int Uniform = 63;
  public static final int Vectorial = 64;
  public static final int Velocity = 65;
  public static final int VerletList = 66;
  public static final int VisualizeDomDecomp = 67;
  public static final int VisualizeParticles = 68;
  public static final int Vorticity = 69;
  public static final int dtLoop = 70;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x66673400467e48d2L, 0xace06f708d2ef66dL);
    builder.put(0x6732efa1a0b5963dL, ArrowExpression);
    builder.put(0x68c06653cec8d87bL, BoundaryConditions);
    builder.put(0x68c06653cec98381L, Box);
    builder.put(0x6732efa1a0b596f2L, CellList);
    builder.put(0x68c06653ceca67c6L, Continuous);
    builder.put(0x68c06653cec8d87eL, CutoffRadius);
    builder.put(0x5ca3f46314712ed1L, Delta);
    builder.put(0x6732efa1a0b5963eL, DifferentialOperator);
    builder.put(0x68c06653cec8d879L, Dimension);
    builder.put(0x68c06653ceca67c7L, Discrete);
    builder.put(0x7d1e7ce65d4e45dfL, Discretize);
    builder.put(0x68c06653cec8d87aL, Domain);
    builder.put(0x7d1e7ce65d4d023aL, Epsilon);
    builder.put(0x7d1e7ce65d4d00ddL, Force);
    builder.put(0x1cbe89376bd34861L, Foreach);
    builder.put(0x68c06653cec8d87dL, Ghost);
    builder.put(0x7d1e7ce65d4e45ddL, Grid);
    builder.put(0x1cbe89376bd2afe8L, Hybrid);
    builder.put(0x75bb93694d198b1aL, ICommand);
    builder.put(0x75bb93694d198b1fL, ICommandC);
    builder.put(0x75bb93694d198b1bL, ICommandD);
    builder.put(0x75bb93694d19287fL, ILoop);
    builder.put(0x1cbe89376bd34860L, InitParticles);
    builder.put(0x68c06653cec8d87cL, InitialConditions);
    builder.put(0x6732efa1a0b5964aL, Interpolate);
    builder.put(0x6732efa1a0b5963fL, JacobianOperator);
    builder.put(0x7d1e7ce65d4d0265L, KineticEnergy);
    builder.put(0x5ca3f46314712ed0L, Lambda);
    builder.put(0x6732efa1a0b59640L, LaplacianOperator);
    builder.put(0x1cbe89376bd34988L, ListOfCommForeach);
    builder.put(0x7d1e7ce65d4e45e4L, ListOfCommLoopD);
    builder.put(0x1cbe89376bd2afe9L, ListOfHybridComm);
    builder.put(0x7d1e7ce65d4d0133L, ListOfPhysicalNotations);
    builder.put(0x7d1e7ce65d4d00dcL, ListOfPhysicalQuantities);
    builder.put(0x68c06653ceca6794L, NonPeriodic);
    builder.put(0x68c06653ceca6799L, NonUniform);
    builder.put(0x7d1e7ce65d4d017bL, Nu);
    builder.put(0x1cbe89376bd2678cL, NumParticles);
    builder.put(0x7d1e7ce65d4d0180L, Omega);
    builder.put(0x6732efa1a0b596f0L, OnGrid);
    builder.put(0x6732efa1a0b596f1L, OnParticle);
    builder.put(0x1cbe89376bd34862L, Particle);
    builder.put(0x68c06653ceca6793L, Periodic);
    builder.put(0x7d1e7ce65d4d017eL, Phi);
    builder.put(0x7d1e7ce65d4d00d6L, PhysicalQuantity);
    builder.put(0x7d1e7ce65d4d0264L, PotentialEnergy);
    builder.put(0x6732efa1a0b59641L, PowerExpression);
    builder.put(0x1cbe89376bd49893L, Property);
    builder.put(0x7d1e7ce65d4d017fL, Psi);
    builder.put(0x6732efa1a0b59642L, RandomNumberExpression);
    builder.put(0x1cbe89376bd34c09L, Remesh);
    builder.put(0x7d1e7ce65d4d017cL, Rho);
    builder.put(0x7d1e7ce65d4d0132L, Sigma);
    builder.put(0x6732efa1a0b59643L, SqrtExpression);
    builder.put(0x6732efa1a0b596f5L, StartLoop);
    builder.put(0x6732efa1a0b596f6L, StopLoop);
    builder.put(0x7d1e7ce65d4d017dL, Tau);
    builder.put(0x75bb93694d192820L, TimeLoop);
    builder.put(0x7d1e7ce65d4e45e0L, TimeLoopC);
    builder.put(0x7d1e7ce65d4ff2e7L, TimeLoopD);
    builder.put(0x68c06653ceca6792L, TypeOfBoundary);
    builder.put(0x68c06653ceca6797L, TypeOfInitialCond);
    builder.put(0x68c06653ceca679eL, TypeOfSimulation);
    builder.put(0x68c06653ceca6798L, Uniform);
    builder.put(0x7d1e7ce65d4e45dcL, Vectorial);
    builder.put(0x1cbe89376bd4989dL, Velocity);
    builder.put(0x6732efa1a0b596f3L, VerletList);
    builder.put(0x5ca3f46314799343L, VisualizeDomDecomp);
    builder.put(0x5ca3f463147993d9L, VisualizeParticles);
    builder.put(0x1cbe89376bd4989eL, Vorticity);
    builder.put(0x6732efa1a0b596f4L, dtLoop);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
