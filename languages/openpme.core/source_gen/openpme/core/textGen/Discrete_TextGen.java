package openpme.core.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Discrete_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    // Editor component follows >>> 
    // Inlined query computation follows >>> 
    String returnValueAuxVar_5;
    // Simulation of a return statement (BaseLanguage does not have goto. Thus we use a loop statement and breaks): 
    do {
      returnValueAuxVar_5 = SConceptOperations.conceptAlias(SNodeOperations.getConcept(ctx.getPrimaryInput()));
      break;
    } while (false);
    // <<< Inlined query computation ends 
    tgs.append(returnValueAuxVar_5);
    tgs.newLine();
    tgs.indent();
    // <<< Editor component ends 
    tgs.increaseIndent();
    tgs.indent();
    tgs.appendNode(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.discrete_body$Pge3));
    tgs.decreaseIndent();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink discrete_body$Pge3 = MetaAdapterFactory.getContainmentLink(0x66673400467e48d2L, 0xace06f708d2ef66dL, 0x68c06653ceca67c7L, 0x7d1e7ce65d4d0070L, "discrete_body");
  }
}
