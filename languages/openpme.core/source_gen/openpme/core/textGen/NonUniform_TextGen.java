package openpme.core.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class NonUniform_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    // Editor component follows >>> 
    // Inlined query computation follows >>> 
    String returnValueAuxVar_4;
    // Simulation of a return statement (BaseLanguage does not have goto. Thus we use a loop statement and breaks): 
    do {
      returnValueAuxVar_4 = SConceptOperations.conceptAlias(SNodeOperations.getConcept(ctx.getPrimaryInput()));
      break;
    } while (false);
    // <<< Inlined query computation ends 
    tgs.append(returnValueAuxVar_4);
    // <<< Editor component ends 
  }
}
